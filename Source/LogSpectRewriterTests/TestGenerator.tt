<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
// <auto-generated>
//     This code was generated by a T4 template.
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>

namespace LogSpectRewriterTests
{
    using System;
    using LogSpectRewriterTests.Infrastructure;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
<#
foreach (TestSet testSet in ReadDirectory(Path.GetDirectoryName(Host.TemplateFile)))
{
#>

    [TestClass]
    public class <#= testSet.Name #>
    {<#
    foreach (Test test in testSet.Tests)
    {
#>

        [TestMethod]
        public void <#= test.Name #>()
        {
            const string ClassDefinitions = @"<#= test.Code.Trim().Replace("\"", "\\\"").Replace("\\", "\\\\") #>";
            const string TestCode = @"<#= test.Run.Trim().Replace("\"", "\\\"").Replace("\\", "\\\\") #>";
            const string ExpectedOutput = @"<#= test.Output.Replace("\"", "\\\"").Replace("\\", "\\\\") #>";

            CodeRunner.CompileRewriteAndRun(ClassDefinitions, TestCode, ExpectedOutput);
        }
<#
    }
#>
    }
<#
}
#>
}
<#+

private class TestSet
{
    public string Name { get; set; }

    public IList<Test> Tests { get; set; }
}

public class Test
{
    public string Name { get; set; }

    public string Code { get; set; }

    public string Run { get; set; }

    public string Output { get; set; }
}

private IList<TestSet> ReadDirectory(string directoryPath)
{
    return
        Directory.GetFiles(directoryPath, "*.md")
            .Select(x => new TestSet { Name = Path.GetFileNameWithoutExtension(x), Tests = ParseMarkdown(File.ReadAllText(x)) })
            .ToList();
}

private IList<Test> ParseMarkdown(string markdown)
{
    int i = 0;
    List<Test> tests = new List<Test>();
    string[] lines = markdown.Split(new[] { "\r\n", "\n" }, StringSplitOptions.None);

    while (true)
    {
        string name = ReadTestName(lines, ref i);
        if (name == null)
        {
            break;
        }

        string code = ReadCodeBlock(lines, ref i, null, "C#");
        string run = ReadCodeBlock(lines, ref i, null, "C#");
        string output = ReadCodeBlock(lines, ref i, "Output:", string.Empty);

        tests.Add(new Test { Name = name, Code = code, Run = run, Output = output });
    }

    return tests;
}

private string ReadTestName(string[] lines, ref int i)
{
    for (; i < lines.Length; i++)
    {
        if (lines[i].StartsWith("### "))
        {
            return lines[i].Substring(4);
        }
    }
	
    return null;
}

private string ReadCodeBlock(string[] lines, ref int i, string label, string syntax)
{
    StringBuilder buffer = new StringBuilder();
    if (label != null)
    {
        while (lines[i++] != label) { }
    }

    while (lines[i++] != "```" + syntax) { }
    while (lines[i++] != "```")
    {
        buffer.AppendLine(lines[i - 1]);
    }

    return buffer.ToString();
}
#>